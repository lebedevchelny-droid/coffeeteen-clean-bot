import os
import sqlite3
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_CHAT_ID = os.environ.get('ADMIN_CHAT_ID')

if not BOT_TOKEN or not ADMIN_CHAT_ID:
    logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect("reports.db", check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        full_name TEXT NOT NULL,
        coffee_shop TEXT NOT NULL,
        photos TEXT NOT NULL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    conn.close()

init_db()

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 36 –∫–æ—Ñ–µ–µ–Ω
COFFEE_SHOPS = {
    1: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ1 (–†–∞—Ö–ª–∏–Ω–∞, 5)",
    2: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ2 (–¢—É–∫–∞—è, 62)",
    3: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ3 (–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞, 53–ê)",
    4: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ4 (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 22)",
    5: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ5 (–ú–∏—Ä–∞, 30–ë)",
    6: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ6 (–ö–∞–ª–∏–Ω–∏–Ω–∞, 32)",
    7: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ7 (–ú.–ì–∞—Ä–µ–µ–≤–∞, 9–ê)",
    8: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ8 (–†.–ì–∞—Ä–µ–µ–≤–∞, 96)",
    9: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ9 (–ì–∞—Ñ—É—Ä–∏, 5)",
    10: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ10 (–ê–±–±–∞—Å–æ–≤–∞, 8)",
    11: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ11 (–ê–±–±–∞—Å–æ–≤–∞, 9)",
    12: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ12 (–¢–¶ –ú–û–ö–ò)",
    13: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ13 (–¢–¶ –ì–æ—Ä–∫–∏)",
    14: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ14 (–¢–¶ –ú–ï–ì–ê)",
    15: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ15 (–¢–¶ –Æ–∂–Ω—ã–π)",
    16: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ16 (–¢–¶ –ü–∞—Ä–∫–•–∞—É—Å 1)",
    17: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ17 (–¢–¶ –ü–∞—Ä–∫–•–∞—É—Å 2)",
    18: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ18 (–¢–¶ –ü–æ—Ä—Ç)",
    19: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ19 (–¢–¶ –ö–æ–ª—å—Ü–æ)",
    20: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ20 (–¢–¶ –†–µ—Å–ø—É–±–ª–∏–∫–∞)",
    21: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ21 (–¢–¶ –§—Ä–∞–Ω—Ç)",
    22: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ22 (–¢–¶ XL)",
    23: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ23 (–î–∂–∞–ª–∏–ª—è, 19)",
    24: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ24 (–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤, 3)",
    25: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ25 (–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è, 24)",
    26: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ26 (–ü—É—à–∫–∏–Ω–∞, 16)",
    27: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ27 (–î—É–±—Ä–∞–≤–Ω–∞—è, 51–ì)",
    28: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ28 (–î–µ–∫–∞–±—Ä–∏—Å—Ç–æ–≤, 85)",
    29: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ29 (–ú–æ–π –†–∏—Ç–º)",
    30: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ30 (–¢—ç—Ü–µ–≤—Å–∫–∞—è, 4–î)",
    31: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ31 (–ú–∞–∫—Å–∏–º–æ–≤–∞, 50)",
    32: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ32 (–Ø—Ä–∞—Ç–∫–∞–Ω, 1)",
    33: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ33 (–¢–¶ –†–∞–¥—É–∂–Ω—ã–π, –°–∞–¥–æ–≤–∞—è 9)",
    34: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ34 (–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫, –≠—Å—Å–µ–Ω)",
    35: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ35 (–ù.–ß–µ–ª–Ω—ã, –î–∂—É–º–±–∞)",
    36: "–ö–æ—Ñ–µ–π–Ω—è ‚Ññ36 (–ó–∞–ø–∞—Å–Ω–∞—è)"
}

class ReportStates(StatesGroup):
    selecting_shop = State()
    confirmation = State()
    uploading_photos = State()

async def send_to_admin(chat_id: int, message: str, photos: list = None):
    try:
        await bot.send_message(chat_id, message, parse_mode=ParseMode.HTML)
        if photos:
            media = [types.InputMediaPhoto(media=photo) for photo in photos]
            await bot.send_media_group(chat_id, media)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        return False

@dp.message(Command("start", "cancel"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = [[types.KeyboardButton(text=name)] for name in COFFEE_SHOPS.values()]
    await message.answer(
        "üè† <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ReportStates.selecting_shop)

@dp.message(ReportStates.selecting_shop)
async def process_shop(message: types.Message, state: FSMContext):
    if message.text not in COFFEE_SHOPS.values():
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return

    await state.update_data(shop_name=message.text)
    
    await message.answer(
        "üßπ <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ì–ï–ù–ö–ï</b>\n\n"
        "‚ÄºÔ∏è –°–¥–µ–ª–∞–π —É–±–æ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n\n"
        "<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å:</b>\n"
        "‚Ä¢ –í—Å–µ —Ç—Ä—É–¥–Ω–æ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ (—É–≥–ª—ã, –∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º)\n"
        "‚Ä¢ –¢—É–∞–ª–µ—Ç (–ø–æ–ª, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É, –∑–µ—Ä–∫–∞–ª–∞, –¥–≤–µ—Ä–Ω—ã–µ —Ä—É—á–∫–∏)\n"
        "‚Ä¢ –ü–æ–ª—ã –≤–æ –≤—Å–µ—Ö –∑–æ–Ω–∞—Ö (–∑–∞–ª—ã, –∫—É—Ö–Ω—è, —Å–∫–ª–∞–¥)\n"
        "‚Ä¢ –†–∞–±–æ—á–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (—Å—Ç–æ–ª—ã, —Å—Ç–æ–π–∫–∏, –ø–æ–ª–∫–∏)\n"
        "‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏, –ø–µ—á–∏)\n"
        "‚Ä¢ –ö–æ—Ñ–µ–º–æ–ª–∫—É (–≤–Ω—É—Ç—Ä–∏ –∏ —Å–Ω–∞—Ä—É–∂–∏, –ª–æ—Ç–æ–∫)\n"
        "‚Ä¢ –ö–æ—Ñ–µ–º–∞—à–∏–Ω—É (–≥—Ä—É–ø–ø–∞, –ø–æ–¥–¥–æ–Ω, –ø–∞–Ω–µ–ª—å)\n"
        "‚Ä¢ –•–æ–ª–¥–µ—Ä—ã –∏ –ø–∏—Ç—á–µ—Ä—ã (–≤–Ω—É—Ç—Ä–∏ –∏ —Å–Ω–∞—Ä—É–∂–∏)\n"
        "‚Ä¢ –ú–æ–π–∫–∏ –∏ —Ä–∞–∫–æ–≤–∏–Ω—ã (–±–µ–∑ –Ω–∞–ª—ë—Ç–∞ –∏ –ø—è—Ç–µ–Ω)\n\n"
        "<b>–ü—Ä–æ–≤–µ—Ä—å –í–°–ï –∑–æ–Ω—ã —Ç—â–∞—Ç–µ–ª—å–Ω–æ!</b>",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")]],
            resize_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ReportStates.confirmation)

@dp.message(ReportStates.confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text != "‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        return
    
    await state.update_data(photos=[])
    await message.answer(
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ 8 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É–±–æ—Ä–∫–∏:</b>\n\n"
        "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:</b>\n"
        "- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 800px –ø–æ –º–µ–Ω—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ\n"
        "- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —á–µ—Ç–∫–æ—Å—Ç—å\n"
        "- –î–æ–ª–∂–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã —É–±–æ—Ä–∫–∏\n"
        "- –°–¥–µ–ª–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(ReportStates.uploading_photos)

@dp.message(ReportStates.uploading_photos, lambda msg: msg.content_type == ContentType.PHOTO)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_photos = data.get("photos", [])
    
    best_photo = message.photo[-1]
    if best_photo.width < 800 or best_photo.height < 800:
        await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 800px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã")
        return
    
    current_photos.append(best_photo.file_id)
    await state.update_data(photos=current_photos)
    
    if len(current_photos) >= 8:
        await finish_report(message, state, current_photos[-8:])
    else:
        remaining = 8 - len(current_photos)
        await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ: {len(current_photos)}/8\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}")

async def finish_report(message: types.Message, state: FSMContext, photos: list):
    data = await state.get_data()
    shop_name = data["shop_name"]
    user = message.from_user

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO reports (user_id, username, full_name, coffee_shop, photos) VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, user.full_name, shop_name, ";".join(photos))
        )
        conn.commit()
        conn.close()
        
        report_msg = f"üìã –ù–û–í–´–ô –û–¢–ß–Å–¢ –û–ë –£–ë–û–†–ö–ï\n\nüè† –ö–æ—Ñ–µ–π–Ω—è: {shop_name}\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user.full_name}\nüìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        success = await send_to_admin(int(ADMIN_CHAT_ID), report_msg, photos)
        
        if success:
            await message.answer("üéâ –û–¢–ß–Å–¢ –£–°–ü–ï–®–ù–û –ü–†–ò–ù–Ø–¢! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! ‚òï")
        else:
            await message.answer("‚ö†Ô∏è –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É. –°–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        await state.clear()

async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
